Overview [#overview]
********************
'Mongo' is a pure Fantom driver for [MongoDB]`http://www.mongodb.org/`.

'Mongo' driver features:

 - Standard and capped collections
 - Write commands: 'insert()', 'update()', 'delete()' and 'findAndModify()' (v2.6+)
 - Write concern support (v2.6+)
 - Optimised queries for 'findOne()' and 'findAll()'
 - Cursor support
 - Aggregation commands: 'aggregate()', 'distinct()', 'group()' and 'mapReduce()'
 - Index support: 'create()', 'ensure()' and 'drop()'
 - User support: 'create()', 'drop()', 'grant()' and 'revoke()' roles
 - Database authentication
 - Server side 'eval()' commands
 - Pooled connection manager for multi-threaded use

'Mongo' driver has been written specifically for MongoDB v2.6.0, released on 8th April 2014, or newer.

Many features, including ALL write commands, will **NOT** work with older MongoDB versions.



Install [#Install]
******************
Install '@{project.name}' with the Fantom Repository Manager ( [fanr]`docFanr::Tool.install` ):

  C:\> fanr install -r http://repo.status302.com/fanr/ @{pod.name}

To use in a [Fantom]`http://fantom.org/` project, add a dependency to 'build.fan':

  depends = ["sys 1.0", ..., "@{pod.name} @{pod.version}+"]



Documentation [#documentation]
******************************
Full API & fandocs are available on the [Status302 repository]`http://repo.status302.com/doc/@{pod.name}/#overview`.



Quick Start [#quickStart]
*************************
1). Start up an instance of MongoDB:
pre>
C:\> mongod

MongoDB starting
db version v2.6.0
waiting for connections on port 27017
<pre

2). Create a text file called 'Example.fan':
pre>
syntax: fantom

using afBson
using afMongo
using concurrent

class Example {

    Void main() {
        mongoClient := MongoClient(ActorPool(), "127.0.0.1", 27017)
        collection  := mongoClient.db("friends").collection("birds")

        documentIn  := [
            "_id"   : ObjectId(),
            "name"  : "Emma",
            "score" : 9
        ]
        collection.insert(documentIn)

        echo( collection.findAll.first )

        mongoClient.shutdown
    }
}
<pre

3). Run 'Example.fan' as a Fantom script from the command line:
pre>
C:\> fan Example.fan

     Alien-Factory
 _____ ___ ___ ___ ___
|     | . |   | . | . |
|_|_|_|___|_|_|_  |___|
              |___|0.0.2

Connected to MongoDB v2.6.0

[_id:5373acbda8000b3491000001, name:Emma, score:9]
<pre



Usage [#usage]
**************
`MongoClient` is the main entry point into 'Mongo'.
From there you can access all other components of MongoDB, namely `Database`, `Collection`, `Index` and `User`.

pre>
MongoClient
 `-- Database
      +-- Collection
      |    `-- Index
      `-- User
<pre

Connecting [#connecting]
========================
'MongoClient' is created with a `ConnectionManager`, which manages your connections to MongoDB.
Use `ConnectionManagerPooled` for normal multi-threaded use:

    conMgr := ConnectionManagerPooled(ActorPool(), IpAddr("localhost"), 27017)
    client := MongoClient(conMgr)

When you create a 'MongoClient' it immediately connects to MongoDB and verifies it is the correct version:

pre>
.    Alien-Factory
 _____ ___ ___ ___ ___
|     | . |   | . | . |
|_|_|_|___|_|_|_  |___|
              |___|0.0.2

Connected to MongoDB v2.4.9

[warn] [afMongo] ****************************************************************************
[warn] [afMongo] ** WARNING: This driver is ONLY compatible with MongoDB v2.6.0 or greater **
[warn] [afMongo] ****************************************************************************
<pre

Ooops! As you can see, we have an old MongoDB running. And true enough, when we run the [QuickStart example]`#quickStart` we get:

  afMongo::MongoCmdErr: Command 'insert' failed. MongoDB says: no such cmd: insert

Installing a fresh MongoDB of version 2.6.0 or greater will get you back on track.


Queries [#queries]
==================
'Mongo' and MongoDB work with documents, they are used throughout the 'Mongo' API.
A MongoDB document is represented in Fantom as a Map of type '[Str:Obj?]'.
All document keys must be strings. Document values can be any valid [BSON]`pod:afBson` type.

> **ALIEN-AID:** See the upcoming Alien-Factory Morphia library for complete Fantom to MongoDB object mapping!

A MongoDB database stores documents in collections. Use the 'find()' methods to query a collection.
Using the 'friends' database in the [QuickStart Example]`#quickStart` we could do:

pre>
syntax: fantom

collection.findOne( ["name":"Emma"] )       // --> return the doc where 'name == Emma' ('Emma' must be unique)

collection.findAll                          // --> return ALL docs in the collection
collection.findAll( ["name":"Emma"] )       // --> return all docs where 'name == Emma'
collection.findAll( ["score": ["\$gt":7]] ) // --> return all docs with 'score > 7'
<pre

The '$gt' expression is an example of a [Query operator]`http://docs.mongodb.org/manual/reference/operator/query/`.

To iterate over a *massive* collection without loading it all into memory, use a `Cursor`.
'Cursors' download documents in batches, behind the scenes, as and when required.
Create and use a 'Cursors' by using the 'find()' method:

pre>
syntax: fantom

collection.find( ["score": ["\$gt":2]] ) |cursor| {
    cursor.batchSize = 10

    while (cursor.hasNext)
        doc := cursor.next
        ...
    }
}
<pre



Write Commands [#writeCmds]
==========================
The 'insert()' command is simple enough and is demonstrated in the [QuickStart example]`#quickStart`.

'update()' and 'delete()' are similar in that they both take a query that describes which document(s) are to be updated / deleted.
For most usages this will a simply be the id of the document in question:

  collection.update( ["_id": objId], [ ...new doc...] )

Note that as of MongoDB v2.6 there is longer any need to call a 'getLastError()' function. All error handling is done via write concerns.
By default 'Mongo' will throw a 'MongoErr' should a write error occur.



ObjectId [#ObjectId]
====================
All documents held in a collection need a unique id, held in a field named '_id'.
If the '_id' field does not exist, MongoDB will create one for you of type [ObjectId]`afBson::ObjectId`.

Note that '_id' does not need to an 'ObjectId', it can be any BSON type. It just needs to be unique in the collection.

Like [marmite]`http://www.ilovemarmite.com/`, people tend to have a love / hate relationship with the 'ObjectId'.
It has a natural sort that (roughly) corresponds to creation time.
But in *humongous* collections it eats up precious extra bytes which means the [index can't fit in RAM]`http://docs.mongodb.org/manual/tutorial/ensure-indexes-fit-ram/`.



Remarks [#remarks]
==================
The Alien-Factoy MongoDB driver was inspired by [fantomongo]`https://bitbucket.org/liamstask/fantomongo` by Liam Staskawicz.



Release Notes [#releaseNotes]
*****************************
v0.0.2 [#v0.0.2]
----------------
 - New: Preview Release